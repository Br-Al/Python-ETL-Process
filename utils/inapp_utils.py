from common.config import get_config


INAPP_CONNECTION_INFO = get_config()['inapp_credentials']

INAPP_IP = INAPP_CONNECTION_INFO['ip']
INAPP_PORT = INAPP_CONNECTION_INFO['port']

HEADERS = {'Content-Type': 'application/json'}
URL = f'http://{INAPP_IP}:{INAPP_PORT}/_sql?format=json'

INDEX_PATTERN = "in-app-tracking-"
BRAND = "soda"
EVENTS = ["event", "installer", "application", "system", "click", "dialog", "umAction", "using"]


# Get queries
GET_QUERY_APPLICATION = """ package.ver as xmlProtoVersion
                          , package.application.pc as pc
                          , package.application.usr as usr
                          , package.application.product as product
                          , package.application.name as name
                          , package.application.type as type
                          , package.application.start as start
                          , package.application.language as language
                          , package.application.build as build
                          , package.application.launch as launch
                          , package.application.\"timezone-bias\" as timezoneBias
                          , package.application.\"timezone-daylight-bias\" as timezoneDaylightBias
                          , package.application.prevLaunchTime as prevLaunchTime
                          , package.application.openTime as openTime
                          , package.application.closeTime as closeTime
                          , package.application.idleTime as idleTime
                          , package.id as packageID
                          , 0 as  packageHash
                          , package.received as packageDate """

GET_QUERY_INSTALLER = """ package.installer.build as build
                        , package.installer.productTitle as productTitle
                        , package.installer.productCode as productCode
                        , package.installer.UID as UID, package.id as packageID
                        , 0 as  packageHash, package.received as packageDate"""

GET_QUERY_SYSTEM = """ package.system.physicalMAC as physicalMAC
                     , package.system.machineID as machineID
                     , package.system.motherboardID as motherboardID
                     , package.system.autoGenerated as autoGenerated
                     , package.system.OSVerShort as OSVerShort
                     , package.system.OSBit as OSBit
                     , package.system.language as language
                     , package.id as packageID
                     , 0 as  packageHash
                     , package.received as packageDate"""

GET_QUERY_CLICK = """ package.application.events.category as category
                    , package.application.events.type as type
                    , package.application.events.time as eventTime
                    , package.application.events.name as name
                    , package.application.events.customvalueparam as customvalueparam
                    , package.application.events.details as details
                    , package.application.events.mkey3 as mkey3
                    , package.application.events.mpi as mpi
                    , package.id as packageID
                    , 0 as  packageHash
                    , package.received as packageDate"""

GET_QUERY_DIALOG = """  package.application.events.category as category
                      , package.application.events.type as type
                      , package.application.events.time as eventTime
                      , package.application.events.name as name
                      , package.application.events.openTime as openTime
                      , package.application.events.closeTime as closeTime
                      , package.application.events.result as result
                      , package.application.events.showAtStartup as showAtStartup
                      , package.application.events.activate as activate
                      , package.application.events.email as email
                      , package.application.events.key as key
                      , package.application.events.module as module
                      , package.application.events.optin as optin
                      , package.application.events.try as try
                      , package.application.events.mpi as mpi
                      , package.id as packageID
                      , 0 as  packageHash
                      , package.received as packageDate """

GET_QUERY_UMACTION = """package.application.events.category as category
                      , package.application.events.type as type
                      , package.application.events.time as eventTime
                      , package.application.events.name as name
                      , package.application.events.accountActivated	as accountActivated
                      , package.application.events.accountId as accountId
                      , package.application.events.email as email
                      , package.application.events.error as error
                      , package.application.events.feature as feature
                      , package.application.events.mkey3 as mkey3
                      , package.application.events.module as module
                      , package.application.events.optin as optin
                      , package.application.events.proceed as proceed
                      , package.application.events.product as product
                      , package.application.events.productId as productId
                      , package.application.events.reason as reason
                      , package.application.events.remotely as remotely
                      , package.application.events.result as result
                      , package.application.events.show as show
                      , package.application.events.status as status
                      , package.application.events.success as success
                      , package.application.events.tobuy as tobuy
                      , package.application.events.trialDays as trialDays
                      , package.application.events.warning as warning
                      , package.application.events.mpi as mpi  
                      , package.id as packageID
                      , 0 as  packageHash
                      , package.received as packageDate"""

GET_QUERY_EVENT = """ package.application.events.category as category
                     , package.application.events.type as type
                     , package.application.events.time as time
                     , package.application.events.name as name
                     , package.application.events.mkey3 as mkey3
                     , package.application.events.accountId as accountId
                     , package.application.events.docID as docID
                     , package.application.events.email as email
                     , package.application.events.mpi as mpi
                     , package.id as packageID
                     , 0 as  packageHash
                     , package.received as packageDate"""

GET_QUERY_USING = """     package.application.events.category as category
                        , package.application.events.type as type
                        , package.application.events.time as eventTime
                        , package.application.events.name as name
                        , package.application.events.completed as completed
                        , package.application.events.docID as docID
                        , package.application.events.expiryDate as expiryDate
                        , package.application.events.feature as feature
                        , package.application.events.initiator as initiator
                        , package.application.events.module as module
                        , package.application.events.numFiles as numFiles
                        , package.application.events.numOfDocs as numOfDocs
                        , package.application.events.numOfSigners as numOfSigners
                        , package.application.events.packageId as packageIdSource
                        , package.application.events.result as result
                        , package.application.events.sortDirection as sortDirection
                        , package.application.events.success as success
                        , package.application.events.error as error 
                        , package.id as packageID
                        , 0 as  packageHash
                        , package.received as packageDate """

# Insert queries
INSERT_QUERY_APPLICATION = """INSERT INTO [INAPP].[application] ([xmlProtoVersion],[pc],[usr],[product],[name],[type],[start]
                                                                ,[language],[build],[launch],[timezoneBias],[timezoneDaylightBias]
                                                                ,[prevLaunchTime],[openTime],[closeTime],[idleTime]
                                                                ,[packageID],[packageHash],[packageDate])
                              VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""

INSERT_QUERY_INSTALLER = """INSERT INTO [INAPP].[installer] ([build], [productTitle], [productCode], [UID]
                                                            ,[packageID],[packageHash], [packageDate])
                            VALUES (?, ?, ?, ?, ?, ?, ?)"""

INSERT_QUERY_SYSTEM = """INSERT INTO [INAPP].[system] ([physicalMAC],[machineID],[motherboardID],[autoGenerated]
                                                      ,[OSVerShort],[OSBit],[language]
                                                      ,[packageID],[packageHash],[packageDate])
                         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""

INSERT_QUERY_CLICK = """INSERT INTO [INAPP].[click] ([category], [type], [eventTime], [name], [customvalueparam]
                                                   , [details], [mkey3], [mpi]
                                                   , [packageID], [packageHash], [packageDate])
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""

INSERT_QUERY_DIALOG = """INSERT INTO [INAPP].[dialog] ([category],[type],[eventTime],[name],[openTime],[closeTime]
                                                   ,[result],[showAtStartup],[activate],[email],[key],[module]
                                                   ,[optin],[try],[mpi]
                                                   ,[packageID],[packageHash],[packageDate])
                         VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""

INSERT_QUERY_UMACTION = """INSERT INTO [INAPP].[umAction] ([category],[type],[eventTime],[name],[accountActivated],[accountId]
                                                        ,[email],[error],[feature],[mkey3],[module],[optin],[proceed]
                                                        ,[product],[productId],[reason],[remotely],[result],[show],[status]
                                                        ,[success],[tobuy],[trialDays],[warning],[mpi]
                                                        ,[packageID],[packageHash],[packageDate])
                          VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""

INSERT_QUERY_EVENT = """INSERT INTO [INAPP].[event] ([category],[type],[eventTime],[name],[mkey3],[accountId],[docID]
                                                     ,[email],[mpi]
                                                     ,[packageID],[packageHash],[packageDate])
                        VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"""

INSERT_QUERY_USING = """INSERT INTO [INAPP].[using] ([category],[type],[eventTime],[name],[completed],[docID],[expiryDate]
                                                 ,[feature],[initiator],[module],[numFiles],[numOfDocs],[numOfSigners]
                                                 ,[packageIdSource],[result],[sortDirection],[success],[error]
                                                 ,[packageID],[packageHash],[packageDate])
                        VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"""

# Where queries
WHERE_QUERY_APPLICATION = ""
WHERE_QUERY_INSTALLER = ""
WHERE_QUERY_SYSTEM = ""
WHERE_QUERY_CLICK = """ and package.application.events.type = 'click' """
WHERE_QUERY_DIALOG = " and package.application.events.type = 'dialog' "
WHERE_QUERY_UMACTION = " and package.application.events.type = 'umAction' "
WHERE_QUERY_EVENT = ""
WHERE_QUERY_USING = " and package.application.events.type = 'using' "


GET_QUERY_MAPPING = {
    "installer": GET_QUERY_INSTALLER,
    "application": GET_QUERY_APPLICATION,
    "system": GET_QUERY_SYSTEM,
    "click": GET_QUERY_CLICK,
    "dialog": GET_QUERY_DIALOG,
    "umAction": GET_QUERY_UMACTION,
    "event": GET_QUERY_EVENT,
    "using": GET_QUERY_USING
}

WHERE_QUERY_MAPPING = {
    "installer": WHERE_QUERY_INSTALLER,
    "application": WHERE_QUERY_APPLICATION,
    "system": WHERE_QUERY_SYSTEM,
    "click": WHERE_QUERY_CLICK,
    "dialog": WHERE_QUERY_DIALOG,
    "umAction": WHERE_QUERY_UMACTION,
    "event": WHERE_QUERY_EVENT,
    "using": WHERE_QUERY_USING
}

INSERT_QUERY_MAPPING = {
    "installer": INSERT_QUERY_INSTALLER,
    "application": INSERT_QUERY_APPLICATION,
    "system": INSERT_QUERY_SYSTEM,
    "click": INSERT_QUERY_CLICK,
    "dialog": INSERT_QUERY_DIALOG,
    "umAction": INSERT_QUERY_UMACTION,
    "event": INSERT_QUERY_EVENT,
    "using": INSERT_QUERY_USING
}

BODY = {
    "fetch_size": 100000
}
